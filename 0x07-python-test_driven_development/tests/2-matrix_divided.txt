The ``Matrix Divided`` module
=============================

Using ``matrix_divided``
------------------------

This is a text file in reStructuredText format.
First ``matrix_divided`` from the ``Matrix Divided`` module:

    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Now use it:

     >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided([[-1, 24, 3],[4, 55, -26]], 6)
    [[-0.17, 4.0, 0.5], [0.67, 9.17, -4.33]]

    >>> matrix_divided([[1],[1]], 3)
    [[0.33], [0.33]]

    >>> matrix_divided([[1]], 3)
    [[0.33]]

    >>> matrix_divided([[1, 2, 3],[4, 5, 6],[4.5, 5, -9.1]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [1.5, 1.67, -3.03]]


##########################################################################################

    >>> matrix_divided([(2,3),(4,5)], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([(2,3),[4,5]], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([(2,3),(4)], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([(),()], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided((4, 4), 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[2,3],(4,5)], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, "s", 3],[4, 5, 6]], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 3, 3], 3], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([4, 3], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, True, 3],[4, 5, 6]], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


    >>> matrix_divided(None, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 3],[4, 5, 6]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[1],[]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[1, 4],[]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], "3")
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], True)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], [4, 5])
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided(None, None)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 8j)
    Traceback (most recent call last):
    TypeError: div must be a number
